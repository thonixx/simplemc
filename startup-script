#!/bin/bash
# github.com/thonixx
# do whatever you want to do with this tiny script

# configure to your needs
SERVERNAME="minecraft"
SERVERPATH="/var/minecraft/server"
JARFILE="craftbukkit.jar" # script is designed for craftbukkit (see line 44 for the option --nojline) you would have to remove it for vanilla server
RAMPARAM="2048M" # general java settings
CPU_COUNT="4" # general java settings

# check for packages
if [ -z "$(which screen)" ]
then
	echo "Screen is not installed but needed."

	# exit with failure
	exit 1
fi

scriptname="${0##*/}"
procs=$(screen -list | grep $SERVERNAME | wc -l)
COMMAND="$1"
ARGUMENT="$2"

if [ "$COMMAND" == "start" ]
then
	# start the minecraft server
	if [ "$procs" -gt 0 ]
	then
		# server already running
		echo "Server seems to run already."
		echo "Please stop it first."
		echo ""
		echo "Debug output (screen sessions):"
		echo ""
		screen -list | grep $SERVERNAME
		
		# exit with failure
		exit 1
	else
		# start server
		echo "Server is starting"
		screen -dmS $SERVERNAME sh -c "cd $SERVERPATH && java -Xmx$RAMPARAM -Xms$RAMPARAM -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalPacing -XX:ParallelGCThreads=$CPU_COUNT -XX:+AggressiveOpts -jar $SERVERPATH/$JARFILE --nojline"
		# give time to start process
		sleep 2
		
		if [ "$(screen -list | grep $SERVERNAME | wc -l)" -gt 0 ]
		then
			echo "Server start succeeded."

			# exit with success
			exit 0
		else
			echo "Server start failed."
			echo "Check your settings."

			# exit with failure
			exit 1
		fi
	fi
elif [ "$COMMAND" == "stop" ]
then
	# stop the minecraft server
	if [ "$procs" -gt 0 ]
	then
		# server running
		echo "Server will be stopped in"
		# issue say command
		screen -S $SERVERNAME -p 0 -X stuff "say Server will be stopped in$(printf \\r)"
		# count down from 10
		sek=10 ; while [ $sek -ge 1 ] ; do echo -ne "$sek .. \r" ; screen -S $SERVERNAME -p 0 -X stuff "say $sek $(printf \\r)" ; sek=$[$sek-1] ; sleep 1 ; done
		# COUNT=11 ; for s in `seq 1 10` ; do sleep 1 ; let COUNT=COUNT-1 ; screen -S $SERVERNAME -p 0 -X stuff "say $COUNT $(printf \\r)" ; echo "$COUNT" ; done
		# stop the server
		screen -S $SERVERNAME -p 0 -X stuff "stop$(printf \\r)"
		echo "Stopping in progress.."

		# define waiting time
		waiting=30
		i=0
		echo -n "."
		
		# wait for exiting
		while [ $i -lt $waiting ]
		do
			# print dot
			echo -n "."
			
			# check if running or not
			if [ "$(screen -list | grep $SERVERNAME | wc -l)" == 0 ]
			then
				echo "done!"
				echo "Server stopped successfully."
				
				# exit with success
				exit 0
			elif [ $i -ge $waiting ]
			then
				echo "failed!"
				echo "Server still seems to run?"
				echo ""
				echo "Debug output (screen sessions):"
				echo ""
				screen -list | grep $SERVERNAME
				
				# exit with failure
				exit 1
			fi

			# raise value
			i="$(expr $i + 1)"
			
			# wait a second
			sleep 1
		done
		
		# exit with failure
		echo "failed!"
		echo "Error. Something weird went wrong."
		exit 1
	else
		# server does not run
		echo "Server is not running."
		
		# exit with failure
		exit 1
	fi
elif [ "$COMMAND" == "cmd" ]
then
	# issue every command you give as parameter
        if [ "$procs" -gt 0 ]
        then
		# server is running
		echo "Issuing command \"$ARGUMENT\""
		# issue any command
		screen -S $SERVERNAME -p 0 -X stuff "$ARGUMENT$(printf \\r)"

		# exit with success
		exit 0
        else
                # server does not run
                echo "Server is not running."

                # exit with failure
                exit 1
        fi
fi

# script would echo this if command not found in the ifs above
echo "This is no known command. Issue start, stop or cmd."
echo ""
echo "Examples:"
echo "./$scriptname start"
echo "./$scriptname cmd \"say hello\""
exit 1
